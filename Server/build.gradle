plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.14'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.server'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //스프링 웹
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //스프링 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //oAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    //H2
    runtimeOnly 'com.h2database:h2'
    //MYSQL
    runtimeOnly 'com.mysql:mysql-connector-j'
    //롬복
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    //Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //AsciiDoctor
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    //JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    //Email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //Querydsl
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    //p6spy
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0"
    //aws sdk
    implementation platform('software.amazon.awssdk:bom:2.20.56')
    implementation 'software.amazon.awssdk:s3:'
    implementation 'software.amazon.awssdk:cloudfront'
    //batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    //quartz
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    //socket (stomp)
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    //embedded redis
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.17.2'
}

jar {
    enabled = false
}

ext {
    snippetsDir = file('build/generated-snippets')
}

//테스트
tasks.register('testA', Test) {
    exclude '**/*ControllerTest.class'
    exclude '**/*IntegrationTest.class'
    exclude '**/*RepositoryTest.class'
    exclude '**/*ServiceTest.class'
    exclude '**/*FilterTest.class'
    useJUnitPlatform()
}

tasks.register('testB', Test) {
    include '**/*IntegrationTest.class'
    include '**/*RepositoryTest.class'
    useJUnitPlatform()
}

tasks.register('testC', Test) {
    include '**/*ServiceTest.class'
    include '**/*FilterTest.class'
    useJUnitPlatform()
}

tasks.register('buildTest', Test) {
    outputs.dir snippetsDir
    include '**/*ControllerTest.class'
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

test.onlyIf {
    !project.hasProperty('doNotRunTests')
}

build.dependsOn buildTest

//AsciiDoc
asciidoctor {
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir
    dependsOn buildTest
}

asciidoctor.doFirst {
    delete file('src/main/resources/static')
}

task createDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc/")
    into file("src/main/resources/static")
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn createDocument
    from("${asciidoctor.outputDir}") {
        into 'static/'
    }
}

//Querydsl
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

clean {
    delete file(querydslDir)
}